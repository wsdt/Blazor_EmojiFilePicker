#pragma checksum "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "331784395b4ddad6581dd356eff30fce1497db93"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace EmojiPicker.Areas.EmojiTextInput.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor"
using Blazor.FileReader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    public partial class FileUploader : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 50 "C:\Users\WSDT\Desktop\C#_.NET\KevinRiedl\SignalR\RealtimeChat_WebAssembly\EmojiPicker\Areas\EmojiTextInput\Pages\FileUploader.razor"
       
    [Parameter] public string FileUploadRoute { get; set; }
    [Parameter] public Action<List<string>> AddImages { get; set; }

    ElementReference dropTargetInput;
    IFileReaderRef ipReference;

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };

    string IpDropClass => string.Join(" ", _ipdropClasses);

    List<IFileInfo> IpFileList { get; } = new List<IFileInfo>();

    protected override void OnAfterRender(bool isFirstRender)
    {
        if (isFirstRender)
        {
            ipReference = fileReaderService.CreateReference(dropTargetInput);
        }
    }

    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnInputChange(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshIpFileList();
    }

    private Task RefreshIpFileList()
    {
        return RefreshFileList(ipReference, IpFileList);
    }

    private async Task RefreshFileList(IFileReaderRef reader, List<IFileInfo> list)
    {
        list.Clear();
        foreach (var file in await reader.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            list.Add(fileInfo);
        }
        // this.StateHasChanged();
        await ReadFile(ipReference);
    }

    public async Task ReadFile(IFileReaderRef list)
    {
        this.StateHasChanged();
        var nl = Environment.NewLine;
        var fileList = await list.EnumerateFilesAsync();
        var imgUriList = new List<string>();

        foreach (var file in fileList)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync())
            {
                var bufferSize = fs.Length; // 20480
                var buffer = new byte[bufferSize];
                int count;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    imgUriList.Add(await UploadFile(buffer));

                    this.StateHasChanged();
                }
            }
            this.StateHasChanged();
        }

        this.AddImages(imgUriList);
    }

    private async Task<string> UploadFile(byte[] img)
    {
        Console.WriteLine("Post to: " + FileUploadRoute);

        var resp = await Http.PostAsync(FileUploadRoute, new ByteArrayContent(img));
        var fileName = await resp.Content.ReadAsStringAsync();
        return fileName;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService fileReaderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
